o de errores en Go
// Go Bases


Objetivo

El objetivo de esta guía práctica es poder afianzar los conceptos sobre el manejo de panic(), defer() & recover(), vistos en el módulo de Go Bases. Para esto vamos a plantear una serie de ejercicios simples e incrementales (trabajaremos y agregaremos complejidad a lo que tenemos que construir), lo que nos permitirá repasar los temas que estudiamos.


Forma de trabajo

Los ejercicios deben ser realizados en sus computadoras. Les recordamos que generen una carpeta para cada clase y ahí dentro tengan un archivo .go para cada ejercicio.



¿Are you ready? 













 Ejercicio 1 - Datos de clientes
Un estudio contable necesita acceder a los datos de sus empleados para poder realizar distintas liquidaciones. Para ello, cuentan con todo el detalle necesario en un archivo .txt.

Tendrás que desarrollar la funcionalidad para poder leer el archivo .txt que nos indica el cliente, sin embargo, no han pasado el archivo a leer por nuestro programa.
Desarrollá el código necesario para leer los datos del archivo llamado “customers.txt” (recordá lo visto sobre el pkg “os”).
Dado que no contamos con el archivo necesario, se obtendrá un error y, en tal caso, el programa deberá arrojar un panic al intentar leer un archivo que no existe, mostrando el mensaje “The indicated file was not found or is damaged”.

Sin perjuicio de ello, deberá siempre imprimirse por consola “ejecución finalizada”.



Ejercicio 2 - Imprimir datos


A continuación, vamos a crear un archivo “customers.txt” con información de los clientes del estudio.

Ahora que el archivo sí existe, el panic no debe ser lanzado.

Creamos el archivo “customers.txt” y le agregamos la información de los clientes.
Extendemos el código del punto uno para que podamos leer este archivo e imprimir los datos que contenga. En el caso de no poder leerlo, se debe lanzar un “panic”.
Recordemos que siempre que termina la ejecución, independientemente del resultado, debemos tener un “defer” que nos in